{"version":3,"sources":["assets/spinner.gif","utils/reducers.js","utils/actions.js","utils/store.js","utils/queries.js","utils/helpers.js","components/ProductItem/index.js","components/ProductList/index.js","components/CategoryMenu/index.js","utils/auth.js","components/CartItem/index.js","components/Cart/index.js","pages/Home.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","utils/mutations.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","pages/Success.js","pages/OrderHistory.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","initialState","products","cart","cartOpen","categories","currentCategory","reducer","state","action","type","product","map","_id","purchaseQuantity","newState","filter","length","createStore","reducers","QUERY_PRODUCTS","gql","QUERY_CHECKOUT","QUERY_CATEGORIES","QUERY_USER","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","oncomplete","close","ProductItem","item","dispatch","useDispatch","useSelector","image","name","price","quantity","className","to","alt","src","count","pluralize","onClick","itemInCart","find","cartItem","parseInt","ProductList","useQuery","loading","data","useEffect","forEach","then","category","key","spinner","CategoryMenu","categoryData","id","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","CartItem","placeholder","value","onChange","target","role","aria-label","removeFromCart","stripePromise","loadStripe","Cart","useLazyQuery","getCheckout","toggleCart","res","redirectToCheckout","sessionId","checkout","session","a","getCart","sum","toFixed","calculateTotal","Auth","loggedIn","productIds","i","push","variables","Home","Detail","useParams","useState","currentProduct","setCurrentProduct","indexedProducts","description","disabled","p","Jumbotron","children","style","height","clear","paddingTop","textAlign","NoMatch","LOGIN","ADD_ORDER","ADD_USER","Login","props","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","preventDefault","mutationResponse","handleChange","onSubmit","htmlFor","Signup","addUser","firstName","lastName","Nav","href","logout","Success","addOrder","setTimeout","saveOrder","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.779ac431.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.a6cd4c51.gif\";","// import the action file\nimport {\n  UPDATE_PRODUCTS,\n  ADD_TO_CART,\n  UPDATE_CART_QUANTITY,\n  REMOVE_FROM_CART,\n  ADD_MULTIPLE_TO_CART,\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n  CLEAR_CART,\n  TOGGLE_CART\n} from \"./actions\";\n\n// define the initialState\nconst initialState = {\n  products: [],\n  cart: [],\n  cartOpen: false,\n  categories: [],\n  currentCategory: ''\n}\n\n// set the initial state of the reducer\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case UPDATE_PRODUCTS:\n      return {\n        ...state,\n        products: [...action.products],\n      };\n\n    case ADD_TO_CART:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: [...state.cart, action.product],\n      };\n\n    case ADD_MULTIPLE_TO_CART:\n      return {\n        ...state,\n        cart: [...state.cart, ...action.products],\n      };\n\n    case UPDATE_CART_QUANTITY:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: state.cart.map(product => {\n          if (action._id === product._id) {\n            product.purchaseQuantity = action.purchaseQuantity\n          }\n          return product\n        })\n      };\n\n    case REMOVE_FROM_CART:\n      let newState = state.cart.filter(product => {\n        return product._id !== action._id;\n      });\n\n      return {\n        ...state,\n        cartOpen: newState.length > 0,\n        cart: newState\n      };\n\n    case CLEAR_CART:\n      return {\n        ...state,\n        cartOpen: false,\n        cart: []\n      };\n\n    case TOGGLE_CART:\n      return {\n        ...state,\n        cartOpen: !state.cartOpen\n      };\n\n    case UPDATE_CATEGORIES:\n      return {\n        ...state,\n        categories: [...action.categories],\n      };\n\n    case UPDATE_CURRENT_CATEGORY:\n      return {\n        ...state,\n        currentCategory: action.currentCategory\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","export const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\n\nexport const ADD_TO_CART = \"ADD_TO_CART\";\nexport const ADD_MULTIPLE_TO_CART = \"ADD_MULTIPLE_TO_CART\";\nexport const REMOVE_FROM_CART = \"REMOVE_FROM_CART\";\nexport const CLEAR_CART = \"CLEAR_CART\";\nexport const UPDATE_CART_QUANTITY = \"UPDATE_CART_QUANTITY\";\nexport const TOGGLE_CART = \"TOGGLE_CART\";\n\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\n","// import createStore \nimport { createStore } from 'redux';\n\n// import the reducer file\nimport reducers from './reducers';\n\n// create a Redux store that accepts the reducers\nexport default createStore(reducers);","import { gql } from '@apollo/client';\n\nexport const QUERY_PRODUCTS = gql`\n  query getProducts($category: ID) {\n    products(category: $category) {\n      _id\n      name\n      description\n      price\n      quantity\n      image\n      category {\n        _id\n      }\n    }\n  }\n`;\n\nexport const QUERY_CHECKOUT = gql`\n  query getCheckout($products: [ID]!) {\n    checkout(products: $products) {\n      session\n    }\n  }\n`;\n\nexport const QUERY_ALL_PRODUCTS = gql`\n  {\n    products {\n      _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      }\n    }\n  }\n`;\n\nexport const QUERY_CATEGORIES = gql`\n  {\n    categories {\n      _id\n      name\n    }\n  }\n`;\n\nexport const QUERY_USER = gql`\n  {\n    user {\n      firstName\n      lastName\n      orders {\n        _id\n        purchaseDate\n        products {\n          _id\n          name\n          description\n          price\n          quantity\n          image\n        }\n      }\n    }\n  }\n`;\n","export function pluralize(name, count) {\n  if (count === 1) {\n    return name;\n  }\n  return name + 's';\n}\n\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    const request = window.indexedDB.open('shop-shop', 1);\n    let db, tx, store;\n    request.onupgradeneeded = function(e) {\n      const db = request.result;\n      db.createObjectStore('products', { keyPath: '_id' });\n      db.createObjectStore('categories', { keyPath: '_id' });\n      db.createObjectStore('cart', { keyPath: '_id' });\n    };\n\n    request.onerror = function(e) {\n      console.log('There was an error');\n    };\n\n    request.onsuccess = function(e) {\n      db = request.result;\n      tx = db.transaction(storeName, 'readwrite');\n      store = tx.objectStore(storeName);\n\n      db.onerror = function(e) {\n        console.log('error', e);\n      };\n\n      switch (method) {\n        case 'put':\n          store.put(object);\n          resolve(object);\n          break;\n        case 'get':\n          const all = store.getAll();\n          all.onsuccess = function() {\n            resolve(all.result);\n          };\n          break;\n        case 'delete':\n          store.delete(object._id);\n          break;\n        default:\n          console.log('No valid method');\n          break;\n      }\n\n      tx.oncomplete = function() {\n        db.close();\n      };\n    };\n  });\n}\n","// import react dependencies\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useDispatch, useSelector } from 'react-redux';\n\n// import utils dependencies\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from \"../../utils/actions\";\nimport { pluralize } from \"../../utils/helpers\"\nimport { idbPromise } from \"../../utils/helpers\";\n\nfunction ProductItem(item) {\n  const dispatch = useDispatch();\n  const state = useSelector(state => state);\n  const { image, name, _id, price, quantity } = item;\n  const { cart } = state;\n\n  // update cart quantity if itemInCart exists; otherwise add to cart\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === _id);\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: _id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...item, purchaseQuantity: 1 }\n      });\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: 1 });\n    }\n  }\n\n  return (\n    <div className=\"card px-1 py-1\">\n      <Link to={`/products/${_id}`}>\n        <img\n          alt={name}\n          src={`/images/${image}`}\n        />\n        <p>{name}</p>\n      </Link>\n      <div>\n        <div>{quantity} {pluralize(\"item\", quantity)} in stock</div>\n        <span>${price}</span>\n      </div>\n      <button onClick={addToCart}>Add to cart</button>\n    </div>\n  );\n}\n\nexport default ProductItem;","// import react dependencies\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\n// import apollo dependency\nimport { useQuery } from '@apollo/client';\n\n// import utils dependencies\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\nimport { QUERY_PRODUCTS } from '../../utils/queries';\nimport { idbPromise } from '../../utils/helpers';\n\n// import component\nimport ProductItem from '../ProductItem';\n\n// import assset\nimport spinner from '../../assets/spinner.gif';\n\nfunction ProductList() {\n  const dispatch = useDispatch();\n  const state = useSelector(state => state);\n  const { currentCategory } = state;\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  // if data, loading, or dispatch is updated, update products\n  useEffect(() => {\n    // retrieved from server\n    if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products,\n      });\n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    } \n    // get cache from idb\n    else if (!loading) {\n      idbPromise('products', 'get').then((products) => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: products,\n        });\n      });\n    }\n  }, [data, loading, dispatch]);\n\n  // return products if currentCategory does not exist, then filter and return products that match product.category._id\n  function filterProducts() {\n    if (!currentCategory) {\n      return state.products;\n    }\n\n    return state.products.filter(\n      (product) => product.category._id === currentCategory\n    );\n  }\n\n  return (\n    <div className=\"my-2\">\n      <h2>Our Products:</h2>\n      {state.products.length ? (\n        <div className=\"flex-row\">\n          {filterProducts().map((product) => (\n            <ProductItem\n              key={product._id}\n              _id={product._id}\n              image={product.image}\n              name={product.name}\n              price={product.price}\n              quantity={product.quantity}\n            />\n          ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n    </div>\n  );\n}\n\nexport default ProductList;","// import react dependencies\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\n// import apollo dependency\nimport { useQuery } from '@apollo/client';\n\n// import utils dependencies\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\nimport { QUERY_CATEGORIES } from '../../utils/queries';\nimport { idbPromise } from '../../utils/helpers';\n\nfunction CategoryMenu() {\n  const dispatch = useDispatch();\n  const state = useSelector(state => state);\n  const { categories } = state;\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n  // if categoryData, loading, or dispatch is updated, update category\n  useEffect(() => {\n    // retrieved from server\n    if (categoryData) {\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories,\n      });\n      categoryData.categories.forEach((category) => {\n        idbPromise('categories', 'put', category);\n      });\n    } \n    // get cache from idb\n    else if (!loading) {\n      idbPromise('categories', 'get').then((categories) => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories,\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch]);\n\n  // update current category when button is clicked\n  const handleClick = (id) => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id,\n    });\n  };\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map((item) => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","// import react dependencies\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\n\n// import utils dependencies\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from \"../../utils/actions\";\nimport { idbPromise } from \"../../utils/helpers\";\n\nconst CartItem = ({ item }) => {\n  const dispatch = useDispatch();\n\n  // remove item with matching item._id from cart\n  const removeFromCart = item => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: item._id\n    });\n    idbPromise('cart', 'delete', { ...item });\n  };\n\n  // change value based on change to item.purchaseQuantity\n  const onChange = (e) => {\n    const value = e.target.value;\n    if (value === '0') {\n      dispatch({\n        type: REMOVE_FROM_CART,\n        _id: item._id\n      });\n      idbPromise('cart', 'delete', { ...item });\n    } else {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: item._id,\n        purchaseQuantity: parseInt(value)\n      });\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: parseInt(value) });\n    }\n  }\n\n  return (\n    <div className=\"flex-row\">\n      <div>\n        <img\n          src={`/images/${item.image}`}\n          alt=\"\"\n        />\n      </div>\n      <div>\n        <div>{item.name}, ${item.price}</div>\n        <div>\n          <span>Qty:</span>\n          <input\n            type=\"number\"\n            placeholder=\"1\"\n            value={item.purchaseQuantity}\n            onChange={onChange}\n          />\n          <span\n            role=\"img\"\n            aria-label=\"trash\"\n            onClick={() => removeFromCart(item)}\n          >\n            🗑️\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CartItem;","// import react dependencies\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\n// import apollo dependency\nimport { useLazyQuery } from '@apollo/client';\n\n// import stripe dependency\nimport { loadStripe } from '@stripe/stripe-js';\n\n// import utils dependencies\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from '../../utils/actions';\nimport { QUERY_CHECKOUT } from '../../utils/queries';\nimport { idbPromise } from '../../utils/helpers';\nimport Auth from '../../utils/auth';\n\n// import component\nimport CartItem from '../CartItem';\n\n// import style\nimport './style.css';\n\n// returns a promise with the stripe object\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n\nconst Cart = () => {\n  const dispatch = useDispatch();\n  const state = useSelector(state => state);\n  const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\n\n  // if data is updated, and data object exists, redirect to checkout referencing sessionId\n  useEffect(() => {\n    if (data) {\n      stripePromise.then((res) => {\n        res.redirectToCheckout({ sessionId: data.checkout.session });\n      });\n    }\n  }, [data]);\n\n  // if cart.length or dispatch is updated, get items from session and populate cart if it is empty\n  useEffect(() => {\n    async function getCart() {\n      const cart = await idbPromise('cart', 'get');\n      dispatch({ type: ADD_MULTIPLE_TO_CART, products: [...cart] });\n    }\n\n    if (!state.cart.length) {\n      getCart();\n    }\n  }, [state.cart.length, dispatch]);\n\n  // toggle car when cart icon is clicked\n  function toggleCart() {\n    dispatch({ type: TOGGLE_CART });\n  }\n\n  // loop through each item in cart, mutiply item.price by the item.purchaseQuantity, and then add to the sum\n  function calculateTotal() {\n    let sum = 0;\n    state.cart.forEach((item) => {\n      sum += item.price * item.purchaseQuantity;\n    });\n    return sum.toFixed(2);\n  }\n\n  // loop through each item in cart and add item._id to productIds array, which is returned from query\n  function submitCheckout() {\n    const productIds = [];\n    state.cart.forEach((item) => {\n      for (let i = 0; i < item.purchaseQuantity; i++) {\n        productIds.push(item._id);\n      }\n    });\n\n    getCheckout({\n      variables: { products: productIds },\n    });\n  }\n\n  if (!state.cartOpen) {\n    return (\n      <div className=\"cart-closed\" onClick={toggleCart}>\n        <span role=\"img\" aria-label=\"trash\">\n          🛒\n        </span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"cart\">\n      <div className=\"close\" onClick={toggleCart}>\n        [close]\n      </div>\n      <h2>Shopping Cart</h2>\n      {state.cart.length ? (\n        <div>\n          {state.cart.map((item) => (\n            <CartItem key={item._id} item={item} />\n          ))}\n\n          <div className=\"flex-row space-between\">\n            <strong>Total: ${calculateTotal()}</strong>\n\n            {Auth.loggedIn() ? (\n              <button onClick={submitCheckout}>Checkout</button>\n            ) : (\n              <span>(log in to check out)</span>\n            )}\n          </div>\n        </div>\n      ) : (\n        <h3>\n          <span role=\"img\" aria-label=\"shocked\">\n            😱\n          </span>\n          You haven't added anything to your cart yet!\n        </h3>\n      )}\n    </div>\n  );\n};\n\nexport default Cart;","import React from \"react\";\nimport ProductList from \"../components/ProductList\";\nimport CategoryMenu from \"../components/CategoryMenu\";\nimport Cart from \"../components/Cart\";\n\nconst Home = () => {\n  return (\n    <div className=\"container\">\n      <CategoryMenu />\n      <ProductList />\n      <Cart />\n    </div>\n  );\n};\n\nexport default Home;\n","// import react dependencies\nimport React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\n\n// import apollo dependency\nimport { useQuery } from '@apollo/client';\n\n// import utils dependencies\nimport {\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  ADD_TO_CART,\n  UPDATE_PRODUCTS,\n} from '../utils/actions';\nimport { QUERY_PRODUCTS } from '../utils/queries';\nimport { idbPromise } from '../utils/helpers';\n\n// import component\nimport Cart from '../components/Cart';\n\n// import assset\nimport spinner from '../assets/spinner.gif';\n\nfunction Detail() {\n  const dispatch = useDispatch();\n  const state = useSelector(state => state);\n  const { id } = useParams();\n  const [currentProduct, setCurrentProduct] = useState({});\n  const { products, cart } = state;\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  // if data, loading, or dispatch is updated, update products\n  useEffect(() => {\n    // already in global store\n    if (products.length) {\n      setCurrentProduct(products.find((product) => product._id === id));\n    }\n    // retrieved from server\n    else if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products,\n      });\n\n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    }\n    // get cache from idb\n    else if (!loading) {\n      idbPromise('products', 'get').then((indexedProducts) => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: indexedProducts,\n        });\n      });\n    }\n  }, [products, data, loading, dispatch, id]);\n\n  // update cart quantity if itemInCart exists; otherwise add to cart \n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === id);\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n      });\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...currentProduct, purchaseQuantity: 1 },\n      });\n      idbPromise('cart', 'put', { ...currentProduct, purchaseQuantity: 1 });\n    }\n  };\n\n  // remove item with currentProduct._id from cart\n  const removeFromCart = () => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProduct._id,\n    });\n    idbPromise('cart', 'delete', { ...currentProduct });\n  };\n\n  return (\n    <>\n      {currentProduct && cart ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">← Back to Products</Link>\n          <h2>{currentProduct.name}</h2>\n          <p>{currentProduct.description}</p>\n          <p>\n            <strong>Price:</strong>${currentProduct.price}{' '}\n            <button onClick={addToCart}>Add to Cart</button>\n            <button\n              disabled={!cart.find((p) => p._id === currentProduct._id)}\n              onClick={removeFromCart}\n            >\n              Remove from Cart\n            </button>\n          </p>\n          <img\n            src={`/images/${currentProduct.image}`}\n            alt={currentProduct.name}\n          />\n        </div>\n      ) : null}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n      <Cart />\n    </>\n  );\n}\n\nexport default Detail;","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nconst NoMatch = () => {\n  return (\n    <div>\n      <Jumbotron>\n        <h1>404 Page Not Found</h1>\n        <h1>\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n            🙄\n          </span>\n        </h1>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default NoMatch;\n","import { gql } from '@apollo/client';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\nexport const ADD_ORDER = gql`\n  mutation addOrder($products: [ID]!) {\n    addOrder(products: $products) {\n      purchaseDate\n      products {\n        _id\n        name\n        description\n        price\n        quantity\n        category {\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser(\n    $firstName: String!\n    $lastName: String!\n    $email: String!\n    $password: String!\n  ) {\n    addUser(\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n      password: $password\n    ) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { Link } from 'react-router-dom';\nimport { LOGIN } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({\n        variables: { email: formState.email, password: formState.password },\n      });\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">← Go to Signup</Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {error ? (\n          <div>\n            <p className=\"error-text\">The provided credentials are incorrect</p>\n          </div>\n        ) : null}\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport Auth from '../utils/auth';\nimport { ADD_USER } from '../utils/mutations';\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email,\n        password: formState.password,\n        firstName: formState.firstName,\n        lastName: formState.lastName,\n      },\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/login\">← Go to Login</Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Signup;\n","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/orderHistory\">\n              Order History\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/signup\">\n              Signup\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/login\">\n              Login\n            </Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h1>\n        <Link to=\"/\">\n          <span role=\"img\" aria-label=\"shopping bag\">🛍️</span>\n           Shop-Lot\n        </Link>\n      </h1>\n\n      <nav>\n        {showNavigation()}\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","import React, { useEffect } from 'react';\nimport { useMutation } from '@apollo/client';\nimport Jumbotron from '../components/Jumbotron';\nimport { ADD_ORDER } from '../utils/mutations';\nimport { idbPromise } from '../utils/helpers';\n\nfunction Success() {\n  const [addOrder] = useMutation(ADD_ORDER);\n\n  useEffect(() => {\n    async function saveOrder() {\n      const cart = await idbPromise('cart', 'get');\n      const products = cart.map((item) => item._id);\n\n      if (products.length) {\n        const { data } = await addOrder({ variables: { products } });\n        const productData = data.addOrder.products;\n\n        productData.forEach((item) => {\n          idbPromise('cart', 'delete', item);\n        });\n      }\n\n      setTimeout(() => {\n        window.location.assign('/');\n      }, 3000);\n    }\n\n    saveOrder();\n  }, [addOrder]);\n\n  return (\n    <div>\n      <Jumbotron>\n        <h1>Success!</h1>\n        <h2>Thank you for your purchase!</h2>\n        <h2>You will now be redirected to the home page</h2>\n      </Jumbotron>\n    </div>\n  );\n}\n\nexport default Success;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useQuery } from '@apollo/client';\nimport { QUERY_USER } from '../utils/queries';\n\nfunction OrderHistory() {\n  const { data } = useQuery(QUERY_USER);\n  let user;\n\n  if (data) {\n    user = data.user;\n  }\n\n  return (\n    <>\n      <div className=\"container my-1\">\n        <Link to=\"/\">← Back to Products</Link>\n\n        {user ? (\n          <>\n            <h2>\n              Order History for {user.firstName} {user.lastName}\n            </h2>\n            {user.orders.map((order) => (\n              <div key={order._id} className=\"my-2\">\n                <h3>\n                  {new Date(parseInt(order.purchaseDate)).toLocaleDateString()}\n                </h3>\n                <div className=\"flex-row\">\n                  {order.products.map(({ _id, image, name, price }, index) => (\n                    <div key={index} className=\"card px-1 py-1\">\n                      <Link to={`/products/${_id}`}>\n                        <img alt={name} src={`/images/${image}`} />\n                        <p>{name}</p>\n                      </Link>\n                      <div>\n                        <span>${price}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n      </div>\n    </>\n  );\n}\n\nexport default OrderHistory;\n","// import react dependencies\nimport React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { Provider } from 'react-redux';\n\n// import apollo dependencies\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\n// import the store file\nimport store from './utils/store';\n\n// import pages\nimport Home from './pages/Home';\nimport Detail from './pages/Detail';\nimport NoMatch from './pages/NoMatch';\nimport Login from './pages/Login';\nimport Signup from './pages/Signup';\nimport Nav from './components/Nav';\nimport Success from './pages/Success';\nimport OrderHistory from './pages/OrderHistory';\n\n// create main GraphQL API endpoint\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\n// create request middleware\nconst authLink = setContext((_, { headers }) => {\n  // get the token from local storage \n  const token = localStorage.getItem('id_token');\n  // return the headers to the context\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\n// create Apollo client\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          <Provider store={store}>\n            <Nav />\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route exact path=\"/login\" component={Login} />\n              <Route exact path=\"/signup\" component={Signup} />\n              <Route exact path=\"/success\" component={Success} />\n              <Route exact path=\"/orderHistory\" component={OrderHistory} />\n              <Route exact path=\"/products/:id\" component={Detail} />\n              <Route component={NoMatch} />\n            </Switch>\n          </Provider>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}